{"ast":null,"code":"import { CommonModule } from '@angular/common';\nimport { InjectionToken, Component, ViewEncapsulation, ChangeDetectionStrategy, ElementRef, Directive, ChangeDetectorRef, Optional, Inject, ContentChildren, ContentChild, Input, forwardRef, ViewChild, EventEmitter, Attribute, Output, NgModule } from '@angular/core';\nimport { mixinDisabled, mixinDisableRipple, setLines, MatLine, MatLineModule, MatRippleModule, MatCommonModule, MatPseudoCheckboxModule } from '@angular/material/core';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject } from 'rxjs';\nimport { takeUntil, startWith } from 'rxjs/operators';\nimport { FocusKeyManager, FocusMonitor } from '@angular/cdk/a11y';\nimport { SelectionModel } from '@angular/cdk/collections';\nimport { hasModifierKey, A, ENTER, SPACE, UP_ARROW, DOWN_ARROW } from '@angular/cdk/keycodes';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { MatDividerModule } from '@angular/material/divider';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// Boilerplate for applying mixins to MatList.\n/** @docs-private */\nclass MatListBase {}\nconst _MatListMixinBase = /*#__PURE__*/mixinDisabled( /*#__PURE__*/mixinDisableRipple(MatListBase));\n// Boilerplate for applying mixins to MatListItem.\n/** @docs-private */\nclass MatListItemBase {}\nconst _MatListItemMixinBase = /*#__PURE__*/mixinDisableRipple(MatListItemBase);\n/**\n * Injection token that can be used to inject instances of `MatList`. It serves as\n * alternative token to the actual `MatList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_LIST = /*#__PURE__*/new InjectionToken('MatList');\n/**\n * Injection token that can be used to inject instances of `MatNavList`. It serves as\n * alternative token to the actual `MatNavList` class which could cause unnecessary\n * retention of the class and its component metadata.\n */\nconst MAT_NAV_LIST = /*#__PURE__*/new InjectionToken('MatNavList');\nclass MatNavList extends _MatListMixinBase {\n  constructor() {\n    super(...arguments);\n    /** Emits when the state of the list changes. */\n    this._stateChanges = new Subject();\n  }\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\nclass MatList extends _MatListMixinBase {\n  constructor(_elementRef) {\n    super();\n    this._elementRef = _elementRef;\n    /** Emits when the state of the list changes. */\n    this._stateChanges = new Subject();\n    if (this._getListType() === 'action-list') {\n      _elementRef.nativeElement.classList.add('mat-action-list');\n    }\n  }\n  _getListType() {\n    const nodeName = this._elementRef.nativeElement.nodeName.toLowerCase();\n    if (nodeName === 'mat-list') {\n      return 'list';\n    }\n    if (nodeName === 'mat-action-list') {\n      return 'action-list';\n    }\n    return null;\n  }\n  ngOnChanges() {\n    this._stateChanges.next();\n  }\n  ngOnDestroy() {\n    this._stateChanges.complete();\n  }\n}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatListAvatarCssMatStyler {}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatListIconCssMatStyler {}\n/**\n * Directive whose purpose is to add the mat- CSS styling to this selector.\n * @docs-private\n */\nclass MatListSubheaderCssMatStyler {}\n/** An item within a Material Design list. */\nclass MatListItem extends _MatListItemMixinBase {\n  constructor(_element, _changeDetectorRef, navList, list) {\n    super();\n    this._element = _element;\n    this._isInteractiveList = false;\n    this._destroyed = new Subject();\n    this._disabled = false;\n    this._isInteractiveList = !!(navList || list && list._getListType() === 'action-list');\n    this._list = navList || list;\n    // If no type attribute is specified for <button>, set it to \"button\".\n    // If a type attribute is already specified, do nothing.\n    const element = this._getHostElement();\n    if (element.nodeName.toLowerCase() === 'button' && !element.hasAttribute('type')) {\n      element.setAttribute('type', 'button');\n    }\n    if (this._list) {\n      // React to changes in the state of the parent list since\n      // some of the item's properties depend on it (e.g. `disableRipple`).\n      this._list._stateChanges.pipe(takeUntil(this._destroyed)).subscribe(() => {\n        _changeDetectorRef.markForCheck();\n      });\n    }\n  }\n  /** Whether the option is disabled. */\n  get disabled() {\n    return this._disabled || !!(this._list && this._list.disabled);\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n  }\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n  ngOnDestroy() {\n    this._destroyed.next();\n    this._destroyed.complete();\n  }\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return !this._isInteractiveList || this.disableRipple || !!(this._list && this._list.disableRipple);\n  }\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatSelectionListBase {}\nconst _MatSelectionListMixinBase = /*#__PURE__*/mixinDisableRipple(MatSelectionListBase);\nclass MatListOptionBase {}\nconst _MatListOptionMixinBase = /*#__PURE__*/mixinDisableRipple(MatListOptionBase);\n/** @docs-private */\nconst MAT_SELECTION_LIST_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: /*#__PURE__*/forwardRef(() => MatSelectionList),\n  multi: true\n};\n/** Change event that is being fired whenever the selected state of an option changes. */\nclass MatSelectionListChange {\n  constructor( /** Reference to the selection list that emitted the event. */\n  source,\n  /**\n   * Reference to the option that has been changed.\n   * @deprecated Use `options` instead, because some events may change more than one option.\n   * @breaking-change 12.0.0\n   */\n  option, /** Reference to the options that have been changed. */\n  options) {\n    this.source = source;\n    this.option = option;\n    this.options = options;\n  }\n}\n/**\n * Component for list-options of selection-list. Each list-option can automatically\n * generate a checkbox and can put current item into the selectionModel of selection-list\n * if the current item is selected.\n */\nclass MatListOption extends _MatListOptionMixinBase {\n  constructor(_element, _changeDetector, /** @docs-private */\n  selectionList) {\n    super();\n    this._element = _element;\n    this._changeDetector = _changeDetector;\n    this.selectionList = selectionList;\n    this._selected = false;\n    this._disabled = false;\n    this._hasFocus = false;\n    /** Whether the label should appear before or after the checkbox. Defaults to 'after' */\n    this.checkboxPosition = 'after';\n    /**\n     * This is set to true after the first OnChanges cycle so we don't clear the value of `selected`\n     * in the first cycle.\n     */\n    this._inputsInitialized = false;\n  }\n  /** Theme color of the list option. This sets the color of the checkbox. */\n  get color() {\n    return this._color || this.selectionList.color;\n  }\n  set color(newValue) {\n    this._color = newValue;\n  }\n  /** Value of the option */\n  get value() {\n    return this._value;\n  }\n  set value(newValue) {\n    if (this.selected && !this.selectionList.compareWith(newValue, this.value) && this._inputsInitialized) {\n      this.selected = false;\n    }\n    this._value = newValue;\n  }\n  /** Whether the option is disabled. */\n  get disabled() {\n    return this._disabled || this.selectionList && this.selectionList.disabled;\n  }\n  set disabled(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._disabled) {\n      this._disabled = newValue;\n      this._changeDetector.markForCheck();\n    }\n  }\n  /** Whether the option is selected. */\n  get selected() {\n    return this.selectionList.selectedOptions.isSelected(this);\n  }\n  set selected(value) {\n    const isSelected = coerceBooleanProperty(value);\n    if (isSelected !== this._selected) {\n      this._setSelected(isSelected);\n      this.selectionList._reportValueChange();\n    }\n  }\n  ngOnInit() {\n    const list = this.selectionList;\n    if (list._value && list._value.some(value => list.compareWith(value, this._value))) {\n      this._setSelected(true);\n    }\n    const wasSelected = this._selected;\n    // List options that are selected at initialization can't be reported properly to the form\n    // control. This is because it takes some time until the selection-list knows about all\n    // available options. Also it can happen that the ControlValueAccessor has an initial value\n    // that should be used instead. Deferring the value change report to the next tick ensures\n    // that the form control value is not being overwritten.\n    Promise.resolve().then(() => {\n      if (this._selected || wasSelected) {\n        this.selected = true;\n        this._changeDetector.markForCheck();\n      }\n    });\n    this._inputsInitialized = true;\n  }\n  ngAfterContentInit() {\n    setLines(this._lines, this._element);\n  }\n  ngOnDestroy() {\n    if (this.selected) {\n      // We have to delay this until the next tick in order\n      // to avoid changed after checked errors.\n      Promise.resolve().then(() => {\n        this.selected = false;\n      });\n    }\n    const hadFocus = this._hasFocus;\n    const newActiveItem = this.selectionList._removeOptionFromList(this);\n    // Only move focus if this option was focused at the time it was destroyed.\n    if (hadFocus && newActiveItem) {\n      newActiveItem.focus();\n    }\n  }\n  /** Toggles the selection state of the option. */\n  toggle() {\n    this.selected = !this.selected;\n  }\n  /** Allows for programmatic focusing of the option. */\n  focus() {\n    this._element.nativeElement.focus();\n  }\n  /**\n   * Returns the list item's text label. Implemented as a part of the FocusKeyManager.\n   * @docs-private\n   */\n  getLabel() {\n    return this._text ? this._text.nativeElement.textContent || '' : '';\n  }\n  /** Whether this list item should show a ripple effect when clicked. */\n  _isRippleDisabled() {\n    return this.disabled || this.disableRipple || this.selectionList.disableRipple;\n  }\n  _handleClick() {\n    if (!this.disabled && (this.selectionList.multiple || !this.selected)) {\n      this.toggle();\n      // Emit a change event if the selected state of the option changed through user interaction.\n      this.selectionList._emitChangeEvent([this]);\n    }\n  }\n  _handleFocus() {\n    this.selectionList._setFocusedOption(this);\n    this._hasFocus = true;\n  }\n  _handleBlur() {\n    this.selectionList._onTouched();\n    this._hasFocus = false;\n  }\n  /** Retrieves the DOM element of the component host. */\n  _getHostElement() {\n    return this._element.nativeElement;\n  }\n  /** Sets the selected state of the option. Returns whether the value has changed. */\n  _setSelected(selected) {\n    if (selected === this._selected) {\n      return false;\n    }\n    this._selected = selected;\n    if (selected) {\n      this.selectionList.selectedOptions.select(this);\n    } else {\n      this.selectionList.selectedOptions.deselect(this);\n    }\n    this._changeDetector.markForCheck();\n    return true;\n  }\n  /**\n   * Notifies Angular that the option needs to be checked in the next change detection run. Mainly\n   * used to trigger an update of the list option if the disabled state of the selection list\n   * changed.\n   */\n  _markForCheck() {\n    this._changeDetector.markForCheck();\n  }\n}\n/**\n * Material Design list component where each item is a selectable option. Behaves as a listbox.\n */\nclass MatSelectionList extends _MatSelectionListMixinBase {\n  constructor(_element,\n  // @breaking-change 11.0.0 Remove `tabIndex` parameter.\n  tabIndex, _changeDetector,\n  // @breaking-change 11.0.0 `_focusMonitor` parameter to become required.\n  _focusMonitor) {\n    super();\n    this._element = _element;\n    this._changeDetector = _changeDetector;\n    this._focusMonitor = _focusMonitor;\n    this._multiple = true;\n    this._contentInitialized = false;\n    /** Emits a change event whenever the selected state of an option changes. */\n    this.selectionChange = new EventEmitter();\n    /**\n     * Tabindex of the selection list.\n     * @breaking-change 11.0.0 Remove `tabIndex` input.\n     */\n    this.tabIndex = 0;\n    /** Theme color of the selection list. This sets the checkbox color for all list options. */\n    this.color = 'accent';\n    /**\n     * Function used for comparing an option against the selected value when determining which\n     * options should appear as selected. The first argument is the value of an options. The second\n     * one is a value from the selected value. A boolean must be returned.\n     */\n    this.compareWith = (a1, a2) => a1 === a2;\n    this._disabled = false;\n    /** The currently selected options. */\n    this.selectedOptions = new SelectionModel(this._multiple);\n    /** The tabindex of the selection list. */\n    this._tabIndex = -1;\n    /** View to model callback that should be called whenever the selected options change. */\n    this._onChange = _ => {};\n    /** Emits when the list has been destroyed. */\n    this._destroyed = new Subject();\n    /** View to model callback that should be called if the list or its options lost focus. */\n    this._onTouched = () => {};\n  }\n  /** Whether the selection list is disabled. */\n  get disabled() {\n    return this._disabled;\n  }\n  set disabled(value) {\n    this._disabled = coerceBooleanProperty(value);\n    // The `MatSelectionList` and `MatListOption` are using the `OnPush` change detection\n    // strategy. Therefore the options will not check for any changes if the `MatSelectionList`\n    // changed its state. Since we know that a change to `disabled` property of the list affects\n    // the state of the options, we manually mark each option for check.\n    this._markOptionsForCheck();\n  }\n  /** Whether selection is limited to one or multiple items (default multiple). */\n  get multiple() {\n    return this._multiple;\n  }\n  set multiple(value) {\n    const newValue = coerceBooleanProperty(value);\n    if (newValue !== this._multiple) {\n      if (this._contentInitialized && (typeof ngDevMode === 'undefined' || ngDevMode)) {\n        throw new Error('Cannot change `multiple` mode of mat-selection-list after initialization.');\n      }\n      this._multiple = newValue;\n      this.selectedOptions = new SelectionModel(this._multiple, this.selectedOptions.selected);\n    }\n  }\n  ngAfterContentInit() {\n    var _a;\n    this._contentInitialized = true;\n    this._keyManager = new FocusKeyManager(this.options).withWrap().withTypeAhead().withHomeAndEnd()\n    // Allow disabled items to be focusable. For accessibility reasons, there must be a way for\n    // screenreader users, that allows reading the different options of the list.\n    .skipPredicate(() => false).withAllowedModifierKeys(['shiftKey']);\n    if (this._value) {\n      this._setOptionsFromValues(this._value);\n    }\n    // If the user attempts to tab out of the selection list, allow focus to escape.\n    this._keyManager.tabOut.pipe(takeUntil(this._destroyed)).subscribe(() => {\n      this._allowFocusEscape();\n    });\n    // When the number of options change, update the tabindex of the selection list.\n    this.options.changes.pipe(startWith(null), takeUntil(this._destroyed)).subscribe(() => {\n      this._updateTabIndex();\n    });\n    // Sync external changes to the model back to the options.\n    this.selectedOptions.changed.pipe(takeUntil(this._destroyed)).subscribe(event => {\n      if (event.added) {\n        for (let item of event.added) {\n          item.selected = true;\n        }\n      }\n      if (event.removed) {\n        for (let item of event.removed) {\n          item.selected = false;\n        }\n      }\n    });\n    // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n    (_a = this._focusMonitor) === null || _a === void 0 ? void 0 : _a.monitor(this._element).pipe(takeUntil(this._destroyed)).subscribe(origin => {\n      if (origin === 'keyboard' || origin === 'program') {\n        const activeIndex = this._keyManager.activeItemIndex;\n        if (!activeIndex || activeIndex === -1) {\n          // If there is no active index, set focus to the first option.\n          this._keyManager.setFirstItemActive();\n        } else {\n          // Otherwise, set focus to the active option.\n          this._keyManager.setActiveItem(activeIndex);\n        }\n      }\n    });\n  }\n  ngOnChanges(changes) {\n    const disableRippleChanges = changes['disableRipple'];\n    const colorChanges = changes['color'];\n    if (disableRippleChanges && !disableRippleChanges.firstChange || colorChanges && !colorChanges.firstChange) {\n      this._markOptionsForCheck();\n    }\n  }\n  ngOnDestroy() {\n    var _a;\n    // @breaking-change 11.0.0 Remove null assertion once _focusMonitor is required.\n    (_a = this._focusMonitor) === null || _a === void 0 ? void 0 : _a.stopMonitoring(this._element);\n    this._destroyed.next();\n    this._destroyed.complete();\n    this._isDestroyed = true;\n  }\n  /** Focuses the selection list. */\n  focus(options) {\n    this._element.nativeElement.focus(options);\n  }\n  /** Selects all of the options. */\n  selectAll() {\n    this._setAllOptionsSelected(true);\n  }\n  /** Deselects all of the options. */\n  deselectAll() {\n    this._setAllOptionsSelected(false);\n  }\n  /** Sets the focused option of the selection-list. */\n  _setFocusedOption(option) {\n    this._keyManager.updateActiveItem(option);\n  }\n  /**\n   * Removes an option from the selection list and updates the active item.\n   * @returns Currently-active item.\n   */\n  _removeOptionFromList(option) {\n    const optionIndex = this._getOptionIndex(option);\n    if (optionIndex > -1 && this._keyManager.activeItemIndex === optionIndex) {\n      // Check whether the option is the last item\n      if (optionIndex > 0) {\n        this._keyManager.updateActiveItem(optionIndex - 1);\n      } else if (optionIndex === 0 && this.options.length > 1) {\n        this._keyManager.updateActiveItem(Math.min(optionIndex + 1, this.options.length - 1));\n      }\n    }\n    return this._keyManager.activeItem;\n  }\n  /** Passes relevant key presses to our key manager. */\n  _keydown(event) {\n    const keyCode = event.keyCode;\n    const manager = this._keyManager;\n    const previousFocusIndex = manager.activeItemIndex;\n    const hasModifier = hasModifierKey(event);\n    switch (keyCode) {\n      case SPACE:\n      case ENTER:\n        if (!hasModifier && !manager.isTyping()) {\n          this._toggleFocusedOption();\n          // Always prevent space from scrolling the page since the list has focus\n          event.preventDefault();\n        }\n        break;\n      default:\n        // The \"A\" key gets special treatment, because it's used for the \"select all\" functionality.\n        if (keyCode === A && this.multiple && hasModifierKey(event, 'ctrlKey') && !manager.isTyping()) {\n          const shouldSelect = this.options.some(option => !option.disabled && !option.selected);\n          this._setAllOptionsSelected(shouldSelect, true, true);\n          event.preventDefault();\n        } else {\n          manager.onKeydown(event);\n        }\n    }\n    if (this.multiple && (keyCode === UP_ARROW || keyCode === DOWN_ARROW) && event.shiftKey && manager.activeItemIndex !== previousFocusIndex) {\n      this._toggleFocusedOption();\n    }\n  }\n  /** Reports a value change to the ControlValueAccessor */\n  _reportValueChange() {\n    // Stop reporting value changes after the list has been destroyed. This avoids\n    // cases where the list might wrongly reset its value once it is removed, but\n    // the form control is still live.\n    if (this.options && !this._isDestroyed) {\n      const value = this._getSelectedOptionValues();\n      this._onChange(value);\n      this._value = value;\n    }\n  }\n  /** Emits a change event if the selected state of an option changed. */\n  _emitChangeEvent(options) {\n    this.selectionChange.emit(new MatSelectionListChange(this, options[0], options));\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  writeValue(values) {\n    this._value = values;\n    if (this.options) {\n      this._setOptionsFromValues(values || []);\n    }\n  }\n  /** Implemented as a part of ControlValueAccessor. */\n  setDisabledState(isDisabled) {\n    this.disabled = isDisabled;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnChange(fn) {\n    this._onChange = fn;\n  }\n  /** Implemented as part of ControlValueAccessor. */\n  registerOnTouched(fn) {\n    this._onTouched = fn;\n  }\n  /** Sets the selected options based on the specified values. */\n  _setOptionsFromValues(values) {\n    this.options.forEach(option => option._setSelected(false));\n    values.forEach(value => {\n      const correspondingOption = this.options.find(option => {\n        // Skip options that are already in the model. This allows us to handle cases\n        // where the same primitive value is selected multiple times.\n        return option.selected ? false : this.compareWith(option.value, value);\n      });\n      if (correspondingOption) {\n        correspondingOption._setSelected(true);\n      }\n    });\n  }\n  /** Returns the values of the selected options. */\n  _getSelectedOptionValues() {\n    return this.options.filter(option => option.selected).map(option => option.value);\n  }\n  /** Toggles the state of the currently focused option if enabled. */\n  _toggleFocusedOption() {\n    let focusedIndex = this._keyManager.activeItemIndex;\n    if (focusedIndex != null && this._isValidIndex(focusedIndex)) {\n      let focusedOption = this.options.toArray()[focusedIndex];\n      if (focusedOption && !focusedOption.disabled && (this._multiple || !focusedOption.selected)) {\n        focusedOption.toggle();\n        // Emit a change event because the focused option changed its state through user\n        // interaction.\n        this._emitChangeEvent([focusedOption]);\n      }\n    }\n  }\n  /**\n   * Sets the selected state on all of the options\n   * and emits an event if anything changed.\n   */\n  _setAllOptionsSelected(isSelected, skipDisabled, isUserInput) {\n    // Keep track of whether anything changed, because we only want to\n    // emit the changed event when something actually changed.\n    const changedOptions = [];\n    this.options.forEach(option => {\n      if ((!skipDisabled || !option.disabled) && option._setSelected(isSelected)) {\n        changedOptions.push(option);\n      }\n    });\n    if (changedOptions.length) {\n      this._reportValueChange();\n      if (isUserInput) {\n        this._emitChangeEvent(changedOptions);\n      }\n    }\n  }\n  /**\n   * Utility to ensure all indexes are valid.\n   * @param index The index to be checked.\n   * @returns True if the index is valid for our list of options.\n   */\n  _isValidIndex(index) {\n    return index >= 0 && index < this.options.length;\n  }\n  /** Returns the index of the specified list option. */\n  _getOptionIndex(option) {\n    return this.options.toArray().indexOf(option);\n  }\n  /** Marks all the options to be checked in the next change detection run. */\n  _markOptionsForCheck() {\n    if (this.options) {\n      this.options.forEach(option => option._markForCheck());\n    }\n  }\n  /**\n   * Removes the tabindex from the selection list and resets it back afterwards, allowing the user\n   * to tab out of it. This prevents the list from capturing focus and redirecting it back within\n   * the list, creating a focus trap if it user tries to tab away.\n   */\n  _allowFocusEscape() {\n    this._tabIndex = -1;\n    setTimeout(() => {\n      this._tabIndex = 0;\n      this._changeDetector.markForCheck();\n    });\n  }\n  /** Updates the tabindex based upon if the selection list is empty. */\n  _updateTabIndex() {\n    this._tabIndex = this.options.length === 0 ? -1 : 0;\n  }\n}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass MatListModule {}\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { MAT_LIST, MAT_NAV_LIST, MAT_SELECTION_LIST_VALUE_ACCESSOR, MatList, MatListAvatarCssMatStyler, MatListIconCssMatStyler, MatListItem, MatListModule, MatListOption, MatListSubheaderCssMatStyler, MatNavList, MatSelectionList, MatSelectionListChange };\n//# sourceMappingURL=list.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}